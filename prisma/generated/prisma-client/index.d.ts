// Code generated by Prisma (prisma@1.28.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  college: (where?: CollegeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  college: (where: CollegeWhereUniqueInput) => CollegePromise;
  colleges: (
    args?: {
      where?: CollegeWhereInput;
      orderBy?: CollegeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<College>;
  collegesConnection: (
    args?: {
      where?: CollegeWhereInput;
      orderBy?: CollegeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CollegeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCollege: (data: CollegeCreateInput) => CollegePromise;
  updateCollege: (
    args: { data: CollegeUpdateInput; where: CollegeWhereUniqueInput }
  ) => CollegePromise;
  updateManyColleges: (
    args: { data: CollegeUpdateManyMutationInput; where?: CollegeWhereInput }
  ) => BatchPayloadPromise;
  upsertCollege: (
    args: {
      where: CollegeWhereUniqueInput;
      create: CollegeCreateInput;
      update: CollegeUpdateInput;
    }
  ) => CollegePromise;
  deleteCollege: (where: CollegeWhereUniqueInput) => CollegePromise;
  deleteManyColleges: (where?: CollegeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  college: (
    where?: CollegeSubscriptionWhereInput
  ) => CollegeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CollegeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "circulation_ASC"
  | "circulation_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CollegeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CollegeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  circulation?: Int;
  circulation_not?: Int;
  circulation_in?: Int[] | Int;
  circulation_not_in?: Int[] | Int;
  circulation_lt?: Int;
  circulation_lte?: Int;
  circulation_gt?: Int;
  circulation_gte?: Int;
  deleted?: Boolean;
  deleted_not?: Boolean;
  AND?: CollegeWhereInput[] | CollegeWhereInput;
  OR?: CollegeWhereInput[] | CollegeWhereInput;
  NOT?: CollegeWhereInput[] | CollegeWhereInput;
}

export interface CollegeCreateInput {
  name: String;
  city: String;
  state: String;
  zip: String;
  circulation: Int;
  deleted?: Boolean;
}

export interface CollegeUpdateInput {
  name?: String;
  city?: String;
  state?: String;
  zip?: String;
  circulation?: Int;
  deleted?: Boolean;
}

export interface CollegeUpdateManyMutationInput {
  name?: String;
  city?: String;
  state?: String;
  zip?: String;
  circulation?: Int;
  deleted?: Boolean;
}

export interface CollegeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CollegeWhereInput;
  AND?: CollegeSubscriptionWhereInput[] | CollegeSubscriptionWhereInput;
  OR?: CollegeSubscriptionWhereInput[] | CollegeSubscriptionWhereInput;
  NOT?: CollegeSubscriptionWhereInput[] | CollegeSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface College {
  id: ID_Output;
  name: String;
  city: String;
  state: String;
  zip: String;
  circulation: Int;
  deleted: Boolean;
}

export interface CollegePromise extends Promise<College>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  circulation: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
}

export interface CollegeSubscription
  extends Promise<AsyncIterator<College>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  circulation: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface CollegeConnection {
  pageInfo: PageInfo;
  edges: CollegeEdge[];
}

export interface CollegeConnectionPromise
  extends Promise<CollegeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CollegeEdge>>() => T;
  aggregate: <T = AggregateCollegePromise>() => T;
}

export interface CollegeConnectionSubscription
  extends Promise<AsyncIterator<CollegeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CollegeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCollegeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CollegeEdge {
  node: College;
  cursor: String;
}

export interface CollegeEdgePromise extends Promise<CollegeEdge>, Fragmentable {
  node: <T = CollegePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CollegeEdgeSubscription
  extends Promise<AsyncIterator<CollegeEdge>>,
    Fragmentable {
  node: <T = CollegeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCollege {
  count: Int;
}

export interface AggregateCollegePromise
  extends Promise<AggregateCollege>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCollegeSubscription
  extends Promise<AsyncIterator<AggregateCollege>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CollegeSubscriptionPayload {
  mutation: MutationType;
  node: College;
  updatedFields: String[];
  previousValues: CollegePreviousValues;
}

export interface CollegeSubscriptionPayloadPromise
  extends Promise<CollegeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CollegePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CollegePreviousValuesPromise>() => T;
}

export interface CollegeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CollegeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CollegeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CollegePreviousValuesSubscription>() => T;
}

export interface CollegePreviousValues {
  id: ID_Output;
  name: String;
  city: String;
  state: String;
  zip: String;
  circulation: Int;
  deleted: Boolean;
}

export interface CollegePreviousValuesPromise
  extends Promise<CollegePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  circulation: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
}

export interface CollegePreviousValuesSubscription
  extends Promise<AsyncIterator<CollegePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  circulation: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "College",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
