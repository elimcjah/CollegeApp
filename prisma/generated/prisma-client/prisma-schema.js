module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCollege {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type College {
  id: ID!
  name: String!
  city: String!
  state: String!
  zip: String!
  circulation: Int!
  deleted: Boolean!
}

type CollegeConnection {
  pageInfo: PageInfo!
  edges: [CollegeEdge]!
  aggregate: AggregateCollege!
}

input CollegeCreateInput {
  name: String!
  city: String!
  state: String!
  zip: String!
  circulation: Int!
  deleted: Boolean
}

type CollegeEdge {
  node: College!
  cursor: String!
}

enum CollegeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  circulation_ASC
  circulation_DESC
  deleted_ASC
  deleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CollegePreviousValues {
  id: ID!
  name: String!
  city: String!
  state: String!
  zip: String!
  circulation: Int!
  deleted: Boolean!
}

type CollegeSubscriptionPayload {
  mutation: MutationType!
  node: College
  updatedFields: [String!]
  previousValues: CollegePreviousValues
}

input CollegeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CollegeWhereInput
  AND: [CollegeSubscriptionWhereInput!]
  OR: [CollegeSubscriptionWhereInput!]
  NOT: [CollegeSubscriptionWhereInput!]
}

input CollegeUpdateInput {
  name: String
  city: String
  state: String
  zip: String
  circulation: Int
  deleted: Boolean
}

input CollegeUpdateManyMutationInput {
  name: String
  city: String
  state: String
  zip: String
  circulation: Int
  deleted: Boolean
}

input CollegeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  circulation: Int
  circulation_not: Int
  circulation_in: [Int!]
  circulation_not_in: [Int!]
  circulation_lt: Int
  circulation_lte: Int
  circulation_gt: Int
  circulation_gte: Int
  deleted: Boolean
  deleted_not: Boolean
  AND: [CollegeWhereInput!]
  OR: [CollegeWhereInput!]
  NOT: [CollegeWhereInput!]
}

input CollegeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCollege(data: CollegeCreateInput!): College!
  updateCollege(data: CollegeUpdateInput!, where: CollegeWhereUniqueInput!): College
  updateManyColleges(data: CollegeUpdateManyMutationInput!, where: CollegeWhereInput): BatchPayload!
  upsertCollege(where: CollegeWhereUniqueInput!, create: CollegeCreateInput!, update: CollegeUpdateInput!): College!
  deleteCollege(where: CollegeWhereUniqueInput!): College
  deleteManyColleges(where: CollegeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  college(where: CollegeWhereUniqueInput!): College
  colleges(where: CollegeWhereInput, orderBy: CollegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [College]!
  collegesConnection(where: CollegeWhereInput, orderBy: CollegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CollegeConnection!
  node(id: ID!): Node
}

type Subscription {
  college(where: CollegeSubscriptionWhereInput): CollegeSubscriptionPayload
}
`
      }
    